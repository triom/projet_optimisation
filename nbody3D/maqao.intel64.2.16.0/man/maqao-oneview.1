.\" File generated using by MAQAO.
.TH MAQAO-ONEVIEW "1" "2022/11/16" "MAQAO-ONEVIEW 2.16.0" "User Commands"
.SH NAME
maqao-oneview \- manual page for maqao oneview module.
.SH SYNOPSIS
maqao oneview --create-report=<report> --config=<configuration file>
.SH DESCRIPTION
ONE-View drives the execution of other MAQAO modules (LProf, CQA ...)and generates reports aggregating their analysis results.
.SH OPTIONS
.SH "    OPTIONS TO GENERATE REPORTS"
.TP
\fB\-\-create-report\fR\=<report>
Create a report and run all needed steps (including dynamic steps).  Available values are: 
.TP 20 
\fB       one\fR 
A first view of the application based on a dynamic profiling and a  static analysis of innermost loops. Can be generated using option \fB-R1\fR instead of \fB--create-report=one\fR
.
.SH ""
.TP
\fB\-c\fR, \fB\-\-config\fR\=<file>
Specify the path of a configuration file.
.TP
\fB\-\-confidentiality\fR\=<level>
Specify the confidentiality level apply to reports to remove some data. Warning: It apply only on produced reports and not to the whole experiment directory. Level effects are cumulative: Available values are: 
.TP 20 
\fB       0\fR  (default)
No confidentiality, all data are displayed.
.TP 20 
\fB       1\fR 
Source codes are removed.
.TP 20 
\fB       2\fR 
Assembly codes are removed.
.TP 20 
\fB       max\fR 
Use the maximal available confidentiality level
.
.SH ""
.TP
\fB\-xp\fR, \fB\-\-experiment-path\fR\=<path>
Specify the path of an experiment directory.
.TP
\fB\-\-force-all-loops\fR
ONE-View does not analyze loops without debug data. This option forces the analysis of all loops, even if they have no debug data. Filters are still applied.
.TP
\fB\-\-force-static-analysis\fR
ONE-View saves various data in files in order to regenerate reports quicker. This option prevents ONE-View to use these files and generate them again.
.TP
\fB\-\-text-global\fR[\=on/off]
If the option is equals to "on", the "global" section is displayed. Else if the option is equals to "off", the section is not displayed.
.TP
\fB\-\-text-application\fR[\=on/off]
If the option is equals to "on", the "application" section is displayed. Else if the option is equals to "off", the section is not displayed.
.TP
\fB\-\-text-functions\fR[\=on/off]
If the option is equals to "on", the "functions" section is displayed. Else if the option is equals to "off", the section is not displayed.
.TP
\fB\-\-text-functions-full\fR[\=on/off]
If the option is equals to "on", all data of the "functions" section are displayed. Else if the option is equals to "off", the section is not displayed.
.TP
\fB\-\-text-loops\fR[\=on/off]
If the option is equals to "on", the "loops" section is displayed. Else if the option is equals to "off", the section is not displayed.
.TP
\fB\-\-text-loops-full\fR[\=on/off]
If the option is equals to "on", all data of the "loops" section are displayed. Else if the option is equals to "off", the section is not displayed.
.TP
\fB\-\-text-cqa\fR[\=on/off/<loops>]
When text report is displayed, print the "cqa" section. If the parameter  is equal to "on" (default), CQA section is displayed. If it is equal to "off" the CQA section is not displayed. Else, the parameter <loops> describes a set of loops to analyze using CQA. It must have the following format: [<module>:]<id>,[<module>:]<id> where <module> represents the binary object containing the loop. "executable" can be used to refer to executable and is the default value, else it must be an entry inserted into external-libraries. <id> is the MAQAO loop identifier. If <loops> is not defined, the ten hottest loops are analyzed.
.TP
\fB\-\-text-cqa-full\fR[\=on/off/<loops>]
When text report is displayed, print all data from the "cqa" section. If the parameter  is equal to "on" (default), CQA section is displayed. If it is equal to "off" the CQA section is not displayed. Else, the parameter <loops> describes a set of loops to analyze using CQA. It must have the following format: [<module>:]<id>,[<module>:]<id> where <module> represents the binary object containing the loop. "executable" can be used to refer to the executable and is the default value, else it must be an entry inserted into external-libraries. <id> is the MAQAO loop identifier. If <loops> is not defined, the ten hottest loops are analyzed.
.TP
\fB\-of\fR, \fB\-\-output-format\fR\=<format>
Specify the format of generated reports. Several values can be specified using comas Available values are: 
.TP 20 
\fB       all\fR 
All format. Generate report in each available format.
.TP 20 
\fB       html\fR  (default)
html format. Generate a directory containing html files. The main page is index.html.
.TP 20 
\fB       xlsx\fR 
XLSX format. Generate a .xlsx file.
.TP 20 
\fB       text\fR 
Text format. Display the report on current terminal. Options \fB--text-...\fR can be used to customize the report.
.
.SH ""
.TP
\fB\-\-refresh\fR
Usually when an experiment directory is passed, ONE-View reuse the last command used to generate a report the refresh the last produced report with new MAQAO features.
.TP
\fB\-\-replace\fR
When an experiment directory is passed using \fB--experiment-path\fR, ONE-View reuse existing data. This option removes the experiment directory if it exists to be sure new data are produced.
.TP
\fB\-RI\fR, \fB\-\-run-index\fR\=<index>
When the configuration option \fB--multiruns-params\fR is specified in the experiment configuration, the option specifies the run used as base run. <index> default value is 0 and corresponds to the run described by configuration options. If <index> is greater than 0, the base run is the run descrided in \fB--multiruns-params\fR at the same index. 
.TP
\fB\-\-show-program-output\fR[\=on/off]
If the option is equal to "on", program output is printed on the standart output, else it is printed in a file in logs subdirectory (default). If the option is used without parameters, it is considered as 'on'.
.TP
\fB\-WS\fR, \fB\-\-with-scalability\fR[\=<mode>]
Run the scalability analysis. A report level must be used using \fB--create-report\fR. Experiments are described by parameter \fB--multiruns-params\fR. Available values are: 
.TP 20 
\fB       on\fR  (default)
Run the scalability analysis. Efficiency formula is Eff = Time (<ref>) / (Time (<run>) * nb_threads) with <ref> the run with parameters described in the configuration file and <run> a run described by the parameter multiruns-params.
.TP 20 
\fB       off\fR 
Does not run the scalability analysis
.TP 20 
\fB       weak\fR 
Run the scalability analysis but use a different formula for efficiency: Eff = Time (<ref>) / Time (<run>) with <ref> the run with parameters described in the configuration file and <run> a run described by the parameter multiruns-params.
.
.SH ""
.TP
\fB\-WC\fR, \fB\-\-with-compare\fR[\=<mode>]
Run the compare analysis. A report level must be used using \fB--create-report\fR. Experiments are described by parameter \fB--multiruns-params\fR  Available values are: 
.TP 20 
\fB       on\fR  (default)
Run the compare analysis.
.TP 20 
\fB       off\fR 
Does not run the compare analysis
.
.SH ""
.TP
\fB\-\-with-POP\fR[\=<mode>]
Run specific analysis and generate POP metrics. A report level must be used using \fB--create-report\fR.  Available values are: 
.TP 20 
\fB       on\fR 
Run the POP analysis. When <mode> is omitted, it is the default value
.TP 20 
\fB       off\fR  (default)
Does not run the POP analysis
.
.SH ""
.TP
\fB\-WP\fR, \fB\-\-with-prompt\fR[\=<runtime>]
Run PrOMPT analysis. A report level must be used using \fB--create-report\fR. <runtime> is the path to PrOMPT runtime library that must be used for the analysis. If <runtime> is empty, the PrOMPT runtime library libprompt_icc.so is searched in LD_LIBRARY_PATH.
.SH "    CONFIGURATION OPTIONS"
.TP
\fB\-\-base-run-name\fR\=<name>
When \fB--with-scalability\fR or \fB--with-compare\fR is used, specify the name of the run described by experiment configuration, similar to the name option in \fB--multiruns-params\fR entries
.TP
\fB\-\-batch-command\fR\=<cmd>
Specify how to submit a job to the job scheduler. The script must be replaced by <batch_script> Example: sbatch <batch_script>
.TP
\fB\-\-batch-script\fR\=<script>
Specify the job scheduler script <script> to use. It must be a specific version where some values must be replaced by substrings and the corresponding options must be used:   * the application executable and its arguments must be replaced by <run_command>   * the number of processes to use must be replaced by <number_processes>   * the number of nodes to use must be replaced by <number_nodes>   * the number of processes per nodes to use must be replaced by <number_processes_per_node> Other user defined variables can be replaced if they are defined in the \fB--script-variables\fR table. User defined variables must be defined between <> symboles.
.TP
\fB\-\-comments\fR\=string
Specify a comment that is displayed in the HTML report. It must be formatted as HTML code  (so HTML special characters must be escaped or they will be interpreted as HTML code).
.TP
\fB\-\-cqa-params\fR\=<table>
Specify additional parameters passed to CQA. It must be a string representing a Lua table where each entry is a CQA option.
.TP
\fB\-\-custom-categories\fR\=<table>
Specify custom categories to analyze using LPROF results. The default value is to have one category for each entry in \fB--external-libraries\fR. If the table is filled by the user, only categories specified in the table are analyzed. Custom categories are represented by a Lua table where each entry is a custom category. A custom category is described in a subtable with following fields:   * type - "library" (the custom category is a single library), "all-external-libraries" (shortcut to get            one category for each entry in external-libraries as done by default), "library_group" to            accumulate several libraries into a single category   * value - "<library name>" when type is "library", nil when type is "all-external-libraries",            {"lib1.so", "lib2.so"} when type is "library_group"   * name - Used only when type is "library_group", specify the name of the group Example: "{{type = "library", value = "lib1.so"}, {type = "all-external-libraries"}}" Example: "{{type = "library_group", value = {"lib1.so", "lib2.so"}, name = "my_libs"}}" /!\ Warning /!\ If a single library is used in several library groups, some errors will appear in reports
.TP
\fB\-\-dataset\fR\=<dir>
Specify the path to a directory <dir> containing the application dataset. The directory is copied / linked into the experiment directory, according to \fB--dataset-handler\fR value.
.TP
\fB\-\-dataset-handler\fR\=<handler>
When dataset is used, specify how the dataset directory is handled. Available values are: 
.TP 20 
\fB       link\fR  (default)
A link is created from the experiment directory to the specified dataset directory
.TP 20 
\fB       copy\fR 
The specified dataset directory is fully copied into the dataset directory
.
.SH ""
.TP
\fB\-\-environment-variables\fR\=<table>
Specify some environment variables to set before running the application. <table> contains one subtable per environment variable with fields:  * name  - Name of the environment variable.  * value - Value of the environment variable. An alternative syntaxe to declare environment variables is available with \fB--envv_<...>\fR options
.TP
\fB\-\-envv_<VAR>\fR\=<value>
Specify a single environment variable to set before running the application. The environment variable name is <VAR> and its value is <value> For example, \fB--envv_OMP_NUM_THREADS=8\fR can be used to set the environment variable OMP_NUM_THREADS with value 8.
.TP
\fB\-\-excluded-areas\fR\=<table>
Specify areas (loops or blocks) to not analyze. It must be a string representing a Lua table describing a list of areas to ignore using following fields:   * type - "loop" or "block", the type of area to ignore;   * id - a number representing the MAQAO identifier of the area to ignore;   * module - a string representing the binary object containing the area. "executable" if the area   is in the executable or the name of an object listed in \fB--external-libraries\fR. Example: "{{type = "loop", id = 5, module = "executable"},{type = "loop", id = 10, module = "lib1.so"}} 
.TP
\fB\-\-executable\fR\=<exe>
Specify the application <exe> to analyze.
.TP
\fB\-\-external-libraries\fR\=<table>
Specify dynamic libraries to analyze. It must be a string representing a Lua table where each entry is a string with the library name. Example: "{"lib1.so", "lib2.so"}"
.TP
\fB\-\-experiment-name\fR\=<name>
Specify a string copied in report summary that can be used to easily distinguish various reports.
.TP
\fB\-\-filter\fR\=<table>
Specify a filter used to select which loops are dynamically analyzed. It must be a string representing a Lua table describing the filter using two fields:   * type - "number" to give a number of loops to analyze, "coverage" to analyze all loops     which coverage is greater than a given value, "cumulated_coverage" to select the hottest loops     which cumulated coverage is greater or equal to the input threshold coverage value, "all"     to analyze all loops (default)   * value - the number associated to type Default value in {type="number", value = 10} which dynamically analyze the then hottest loops.
.TP
\fB\-\-included-areas\fR\=<table>
Specify areas (loops or blocks) to analyze even if it doesn't match the filter. It must be a string representing a Lua table describing a list of areas to include using following fields:   * type - "loop" or "block", the type of area to include;   * id - a number representing the MAQAO identifier of the area to include;   * module - a string representing the binary object containing the area. "executable" if the area   is in the executable or the name of an object listed in \fB--external-libraries\fR. Example: "{{type = "loop", id = 5, module = "executable"},{type = "loop", id = 10, module = "lib1.so"}} 
.TP
\fB\-\-keep-executable-location\fR\=<boolean>
Specify if the executable should move in the experiment directory or stay only on local system. Default behevior is to copy the executable in the experiment directory (\fB--keep-executable-location=false\fR). If set to true, the executable will stay at its location
.TP
\fB\-\-lprof-params\fR\=<opts>
Specify additional parameters passed to LPROF.
.TP
\fB\-\-lprof-post-process-params\fR\=<table>
Specify additional parameters passed to LPROF for its post processing phase. It must be a string representing a Lua table where each entry is a LPROF option.
.TP
\fB\-\-maximal-path-number\fR\=<nb>
Maximal number of paths a loop can have to be analyzed.
.TP
\fB\-\-mpi-command\fR\=<cmd>
Specify how the MPI runtime must be run. Some values must be replaced by substrings  and the corresponding option must be used:   * the number of processes must be replaced by <number_processes>. Example: "mpirun -n <number_processes>"
.TP
\fB\-\-multiruns-params\fR\=<table>
Specify variants of the base experiment to analyze. Variants are analyzed when some \fB--with-<...>\fR options are used. <table> contains one subtable per experiment with fields:  * number_processes - Number of processes to use.  * number_nodes - Number of nodes to use.  * number_processes_per_node - Number of processes per node to use.  * run_command - Command to use with its parameters. Use same format than \fB--run-command\fR option.  * mpi_command - Command to use to run MPI. Use same format than \fB--mpi-command\fR option.  * dataset - Path to a specific directory. Use same format than \fB--dataset\fR option.  * run_directory - Path to a directory from where to run the application. Use same format than \fB--run-directory\fR option.  * script_variables - A table with user defined variables. Use the same format than \fB--script-variables\fR option.  * environment_variables - A table with user defined environment variables. Use the same format than                            \fB--environment-variables\fR option or the \fB--envv_<VAR>\fR syntax.                            If an environment variable set in the base run must be unset,                            use the entry {name = <ENV VAR NAME>, value = nil} or the shorcut field \fB--unset_envv\fR (see below)  * unset_envv - Shortcut to unset some environment variables defined by base run. The value can be a string with the name  *              of a single environment variable to unset, or a table filled with several environment variables names  * profile_start - A table describing when the profiling should start.  * name - Name of the run that will be used in reports.  * comments - A comment displayed in the HTML report, formated as HTML code.
.TP
\fB\-\-number-nodes\fR\=<nb>
Specify the number of nodes <nb> to use to run the application. The value must  be refered as <number_nodes> in option \fB--mpi-command\fR and in the batch script fs used.
.TP
\fB\-\-number-processes\fR\=<nb>
Specify the number of processes <nb> to use to run the application. The value must  be refered as <number_processes> in option \fB--mpi-command\fR and in the batch script if used.
.TP
\fB\-\-number-processes-per-node\fR\=<nb>
Specify the number of processes per node <nb> to use to run the application. The value must  be refered as <number_processes_per_node> in option \fB--mpi-command\fR and in the batch script if used.
.TP
\fB\-\-object-coverage-threshold\fR\=<nb>
Specify a threshold to apply to objects coverages (loops and functions) to include them in static analysis. All objects whose coverage is lower than the given value <nb> will not be statically and dynamically analyzed. The threshold is apply before applying the \fB--filter\fR parameter.
.TP
\fB\-\-pinning-command\fR\=<cmd>
Specify parameters used to pin the process. If used, <cmd> will be appending before the call to MAQAO.
.TP
\fB\-\-profile-start\fR\=<table>
Specify when the profiling of the application must start. It must be a string representing a Lua table describing the filter using two fields:   * unit - "none" to start the profiling at the application start, "s" to wait a number of seconds   before starting the profiling, "p" to wait a percentage of the application time before starting   the profiling, "probe" to use LPROF probes inserted in the source code to start / pause the profiling   (help about LPROF probes is available with command \fBmaqao oneview --help-guided-profile\fR).   * value - the number associated to unit.
.TP
\fB\-\-qplot-path\fR\=<dir>
Specify the path of QPlot directory containing the file parse.js. Qplot is run with the command \fBnodejs <dir>/parse.js <oneview-report.xlsx>\fR.
.TP
\fB\-\-run-command\fR\=<cmd>
Specify how the application must be run. The application must be replaced by  the substring <executable>. Example: "<executable> --opt=val -a 2"
.TP
\fB\-\-run-directory\fR\=<dir>
Specify the directory where the application must be run. The dataset directory must be refered as <dataset>. It is needed when the application must be run in a specific subdirectory located in the dataset directory. Example: "<dataset>/Run"
.TP
\fB\-\-script-variables\fR\=<table>
Specify custom variables replaced in \fB--batch-script\fR file. Each entry has for key the variable name and for value a string or a number that will replace the tag (<key>) in the script file.
.TP
\fB\-\-scalability-reference\fR\=<value>
Specify which run will be used as reference when scalability reports are generated. If two entries match the filter, the first one described is used as references (main entry, then the entry with the lowest index in \fB--multiruns-params\fR table).  Available values are: 
.TP 20 
\fB       main\fR  (default)
Uses the run specified by main parameters (and not in \fB--multiruns-params\fR) as reference
.TP 20 
\fB       lowest-time\fR 
Uses the shortest run in time as reference
.TP 20 
\fB       highest-time\fR 
Uses the longest run in time as reference
.TP 20 
\fB       lowest-threads\fR 
Uses the run with the lowest number of threads analyzed using LPROF as reference
.TP 20 
\fB       highest-threads\fR 
Uses the run with the highest number of threads analyzed using LPROF as reference
.TP 20 
\fB       lowest-efficiency\fR 
Uses the run with the worst efficiency as reference
.TP 20 
\fB       highest-efficiency\fR 
Uses the run with the better efficiency as reference
.TP 20 
\fB       <number>\fR 
Uses the entry at index <number> in the multiruns-param table as reference.
.
.SH ""
.TP
\fB\-\-source-code-location\fR\=<dir>
Specify the directory <dir> containing the source code. It is necessary if the source code is not located in the directory specified in debug data. <dir> last subdirectory must be present into the source location string extracted from debug data in order to replace the given <dir> string into the original source location
.TP
\fB\-\-thread-filter-threshold\fR\=<nb> <unit>
Specify a threshold to apply to threads to consider them as valid threads and use them in reports. Value is a string composed of a number and an unit: s for seconds and % for percentage of the total walltime (default unit). For example "5s" or "20%". Some runtimes create additional threads to handle specific tasks but that leads to wrong parallel reports.
.SH "    REPORT COMPARISON OPTIONS"
.TP
\fB\-CR\fR, \fB\-\-compare-reports\fR
Create a new HTML report that compare existing reports already produced. The new report nam can be specified using option \fB--experiment-path\fR. Remark: Functions matching between runs is based on executable names and function names, so to compare similar executables, their names must be the same.
.TP
\fB\-\-inputs\fR\=<list>
A list of reports to compare. <list> can be either a set of experiment directories paths separated by a comma or a table describing reports to compare with additional options. Each entry in the table represents a report  and can have following options:  * xp    - (Mandatory) A string representing the path to the report  * name  - A string representing the name used to represent the report during the comparison  * index - A number used if the report contains several runs due to the use of \fB--multiruns_params\fR to specify            which run must be used. Default value is 0 (base run) To simplify the usage of the table syntax, the option inputs=<table> can be declared in a configuration file loaded using option -c / --config
.TP
\fB\-\-include-detailed\fR\=<boolean>
If true, specify that detailed reports must be embeded into the produced HTML directory. Default is false.
.SH "    STABILITY ANALYSIS OPTIONS"
.TP
\fB\-\-analyze-stability\fR\=<report>
Create a stability report that repeat all dynamic steps to analyze the application stability. The number of repetitions can be setup using option \fB--repetitions\fR. Experiment configuration uses all usual ONE-View options such as when \fB--create-report\fR is used. Available values are: 
.TP 20 
\fB       one\fR 
A first view of the application based on a dynamic profiling and a static analysis of innermost loops. Can be generated using option \fB-S1\fR instead of \fB--analyze-stability=one\fR
.
.SH ""
.TP
\fB\-rep\fR, \fB\-\-repetitions\fR\=<nb>
Define how many repetitions must be done for dynamic steps in stability analysis. Default is 31.
.TP
\fB\-\-ranges-count\fR\=<nb>
Define how many ranges are used during statistics computation. Default is 20
.TP
\fB\-\-outliers-count\fR\=<nb>
Define how many outliers runs must be removed during statistics computation. Default is 0
.SH "    OTHER ONEVIEW OPTIONS"
.TP
\fB\-\-create-config\fR\=<file>
Create an empty template of configuration file. If <file> is not specified, a file called config.lua is created in the current directory.
.TP
\fB\-\-create-custom-report\fR\=<name>
Create an empty template of custom report file located in $HOME/.maqao/OV_reports. The file is called <name>.lua and describes a custom report as a Lua table. It can be updated to adapt the report to your needs.
.TP
\fB\-\-list-reports\fR
List all available report names (built-in and custom)
.TP
\fB\-\-help-guided-profile\fR
Show help about how to use probes to trigger / stop profiling at source level.
.TP
\fB\-\-exit-after-profiling\fR
Exit right after profiling (ie. before VPROF/DECAN or functions/loops analysis). Allow to resume on another machine, with large-enough RAM quota, preventing executable/libraries disassembling (inside VPROF/DECAN and functions/loops analysis) from being killed. Resume without "--exit-after-profiling --config=<configuration file>" but with "-xp=<experiment directory>".
.SH "    MAN PAGE"
.TP
\fB\-\-generate-man\fR
Generate the man page of the module based on the module help in the current directory. The generated file is called maqao-<module>.1. Once the man page is generated, the program exits.
.TP
\fB\-\-output\fR\=<path>
Specify the path where the man page is generated.
.TP
\fB\-\-generate-wiki\fR
Generate the wiki page of the module based on the module help on the standard output. Once the man page is generated, the program exits.
.SH "    OPTIONAL FLAGS COMMON TO ALL MODULES"
.TP
\fB\-\-disable-debug\fR
Disable debug data loading. WARNING, this option may alter the tool's accuracy.
.TP
\fB\-\-compiler\fR\=<compiler>
Select the compiler used to create the binary. Available values are: 
GNU, Intel.

.TP
\fB\-\-language\fR\=<language>
Select the source language. Available values are: 
c, c++, fortran.

.TP
\fB\-\-lcore-flow-all\fR
Analyze all instructions returned by MADRAS. Default behaviour is to analyze instructions from sections .text, .init, .fini and .madras.code. 
.TP
\fB\-\-uarch\fR\=<uarch>
Select the micro architecture used for analysis. Available values are: 
.TP 20 
\fB       For x86_64 architecture:\fR 
CORE (CORE2_65), ENHANCED_CORE (CORE2_45), NEHALEM (NHM), WESTMERE, SANDY_BRIDGE (SNB), IVY_BRIDGE (IVB),             IVY_BRIDGE_E (IVBE), HASWELL (HWL), BROADWELL (BWL), SKYLAKE, ICELAKE, ICELAKE_SP,             TIGER_LAKE, ROCKET_LAKE, ALDER_LAKE, SAPPHIRE_RAPIDS, RAPTOR_LAKE, HASWELL_E (HWLE),             KNIGHTS_LANDING (KNL), KNIGHTS_MILL (KNM), KABY_LAKE, COMET_LAKE, ZEN_V1 (ZEN), ZEN_PLUS (ZEN+),             ZEN_V2 (ZEN2), ZEN_V3 (ZEN3)
.
.SH ""
.TP
\fB\-\-proc\fR\=<proc>
Select the processor model used for analysis. maqao --list-procs to display supported processors
.TP
\fB\-ifr\fR, \fB\-\-interleaved-functions-recognition\fR\=<mode>
Select the mode of interleaved functions recognition. Available values are: 
.TP 20 
\fB       off\fR 
Functions are not extracted from connected components.
.TP 20 
\fB       debug_based\fR  (default)
Functions are extracted from connected components matching with debug data.
.TP 20 
\fB       all\fR 
All connected components are extracted into new functions whether they correspond to the debug information or not.
.
.SH ""
.TP
\fB\-dbg\fR, \fB\-\-debug\fR[\=<level>]
Enable debug messages. <level> can be used to specify the level of debug messages to display. Available values are: 
0, 1 (default).

.TP
\fB\-\-\fR
Specify binary parameters for dynamic analysis. Next options are ignored by MAQAO.
.TP
\fB\-h\fR, \fB\-\-help\fR
Print the current help.
.TP
\fB\-v\fR, \fB\-\-version\fR
Print the current version.
.SH EXAMPLES
.TP
maqao oneview --create-config 
Create a configuration file template called config.lua in current directory. This file should be filed using experiment parameters. 
.TP
maqao oneview --create-report=<format> --config=<config.lua> [--experiment-path=<dir>]
Generate the experiment directory and reports. The application will be run at least once so the environment must be set before. To check if the environment is set, just check if your application can be ran and if MAQAO runtimes libraries are in LD_LIBRARY path (libdecanrt.so and libprof.so). <config.lua> is a filled  configuration file based on the template created with \fB--create-config\fR. If <dir> is specified, it will be used as experiment directory name. If the directory already exists, all files created to generate the new report will be located into this directory. Reports are created into the subdirectory RESULTS/ . 
.TP
maqao oneview --create-report=one -c=./config.lua -xp=./exp_oneview
Generate the experiment directory ./exp_oneview then create the report ONE in .html format located in ./exp_oneview/RESULTS/ . 
.TP
maqao oneview -R1 --output-format=all --executable=./my_app --dataset=./data
Generate the experiment directory and reports ONE (\fB-R1\fR) in all available format (\fB--output-format=all\fR) using the executable ./my_app (\fB--executable=./my_app\fR) and the dataset directory ./data (\fB--dataset=./data\fR). 
.TP
maqao oneview -R1 -WS -xp=exp_OV1 -- ./my_app -s 30
Generate report one (\fB-R1\fR) with scalability analysis (\fB-WS\fR) for an application called 'my_app' that is run using command "./my_app -s 30" in a directory called "exp_OV1" (\fB-xp=exp_OV1\fR). Warning ! Using the pattern '\fB-- <executable> [<opts> ...]\fR' is not compatible with command prefixes such as 'mpirun ...' or 'ENV_VAR=...' that must be specified using proper options. 
.TP
maqao oneview -R1 --mpi_command="mpirun -n 2" --envv_OMP_NUM_THREADS="8" -- ./my_app input.dat
Generate report one (\fB-R1\fR) for an application called 'my_app' that uses 2 MPI processes  (\fB--mpi_command="mpirun -n 2"\fR) and 8 OpenMP threads (\fB--envv_OMP_NUM_THREADS="8"\fR). The final command run by ONE-View is \fBOMP_NUM_THREADS=8 mpirun -n 2 ./my_app input.dat\fR 
.SH AUTHOR
Written by The MAQAO team.
.SH "REPORTING BUGS"
Report bugs to <contact@maqao.org>.
.SH COPYRIGHT
MAQAO (C), 2004-2022 Universite de Versailles Saint-Quentin-en-Yvelines (UVSQ), 
is distributed under the GNU Lesser General Public License (GNU LGPL). MAQAO is 
free software; you can use it under the terms of the GNU Lesser General 
Public License as published by the Free Software Foundation; either version 2.1 
of the License, or (at your option) any later version. This software is distributed 
in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the 
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
GNU Lesser General Public License for more details.

The full legal text of the GNU Lesser General Public License (GNU LGPL) is available
at http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
.SH "SEE ALSO"
maqao(1), maqao-madras(1), maqao-disass(1), maqao-cqa(1), maqao-analyze(1), maqao-mil2(1), maqao-otter(1), maqao-mil(1), maqao-lprof(1)
