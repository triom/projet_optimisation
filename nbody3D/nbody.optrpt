Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] nbody.c(284,1)
  -> INLINE: (286,30) atoll(const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (306,3) init(particle_t, u64)
  -> (322,5) move_particles(particle_t, const f32, u64)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.c(23,3) inlined into nbody.c(306,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand(void) (26:19) and call:rand(void) (38:24)
LOOP END

LOOP BEGIN at nbody.c(317,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

    Report from: Code generation optimizations [cg]

nbody.c(322,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
nbody.c(284,1):remark #34051: REGISTER ALLOCATION : [main] nbody.c:284

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8 r12-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     181
            Global    :      69
            Local     :     112
        Regenerable   :      47
        Spilled       :      20
        
    Routine stack
        Variables     :      52 bytes*
            Reads     :       4 [2.57e+00 ~ 2.6%]
            Writes    :       8 [7.71e-01 ~ 0.8%]
        Spills        :     120 bytes*
            Reads     :      22 [1.13e+01 ~ 11.3%]
            Writes    :      17 [5.37e+00 ~ 5.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: move_particles(particle_t, const f32, u64)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (move_particles(particle_t, const f32, u64)) [2] nbody.c(194,1)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at nbody.c(210,5)
remark #16204: OpenMP multithreaded code generation for SINGLE was successful
OpenMP Construct at nbody.c(208,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.c(200,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at nbody.c(261,1)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at nbody.c(261,1)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between p.p[i] (264:5) and p.p[i+3] (278:5)
   LOOP END
LOOP END

LOOP BEGIN at nbody.c(208,1)
   remark #15301: SIMD LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at nbody.c(208,1)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

nbody.c(213,23):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 16 }, types { F32-V256, F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x00000000F }.
nbody.c(214,23):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 16 }, types { F32-V256, F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x00000000F }.
nbody.c(215,23):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 16 }, types { F32-V256, F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x00000000F }.
nbody.c(194,1):remark #34051: REGISTER ALLOCATION : [move_particles] nbody.c:194

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     554
            Global    :      94
            Local     :     460
        Regenerable   :     103
        Spilled       :      21
        
    Routine stack
        Variables     :     120 bytes*
            Reads     :      21 [6.02e-01 ~ 0.6%]
            Writes    :      26 [2.29e+00 ~ 2.3%]
        Spills        :     400 bytes*
            Reads     :      51 [5.44e+00 ~ 5.4%]
            Writes    :      51 [5.17e+00 ~ 5.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: init(particle_t, u64)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (init(particle_t, u64)) [4] nbody.c(22,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.c(23,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand(void) (26:19) and call:rand(void) (38:24)
LOOP END

    Report from: Code generation optimizations [cg]

nbody.c(22,1):remark #34051: REGISTER ALLOCATION : [init] nbody.c:22

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      50
            Global    :      35
            Local     :      15
        Regenerable   :       9
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :      10 [7.85e+00 ~ 7.8%]
            Writes    :       9 [5.04e+00 ~ 5.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
