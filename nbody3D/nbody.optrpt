Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] nbody.c(89,1)
  -> INLINE: (91,30) atoll(const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (105,3) init(particle_t *, u64)
  -> INLINE: (120,7) move_particles(particle_t *, const f32, u64)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.c(23,3) inlined into nbody.c(105,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand(void) (26:21) and call:rand(void) (38:22)
LOOP END

LOOP BEGIN at nbody.c(115,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.c(49,3) inlined into nbody.c(120,7)
      remark #25236: Loop with pragma of trip count = 16384 ignored for large value
      remark #25461: Imperfect Loop Unroll-Jammed by 2   (pre-vector) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at nbody.c(57,7) inlined into nbody.c(120,7)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody.c(57,7) inlined into nbody.c(120,7)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at nbody.c(49,3) inlined into nbody.c(120,7)
   <Remainder>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at nbody.c(57,7) inlined into nbody.c(120,7)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody.c(57,7) inlined into nbody.c(120,7)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at nbody.c(79,3) inlined into nbody.c(120,7)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at nbody.c(79,3) inlined into nbody.c(120,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

nbody.c(60,19):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 24 }, types { F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000007 }.
nbody.c(60,19):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 24 }, types { F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000007 }.
nbody.c(81,7):remark #34064: adjacent sparse (strided) loads partitioned for speed. Details: stride { 24 }, types { F32-V128, F32-V128, F32-V128, F32-V128, F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x00000003F }.
nbody.c(81,7):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 24 }, types { F32-V128, F32-V128, F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x00000000F }.
nbody.c(81,7):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 24 }, types { F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000003 }.
nbody.c(83,7):remark #34065: adjacent sparse (strided) stores partitioned for speed. Details: stride { 24 }, types { F32-V128, F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000007 }.
nbody.c(83,7):remark #34034: adjacent sparse (strided) stores optimized for speed. Details: stride { 24 }, types { F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000003 }.
nbody.c(83,7):remark #34070: adjacent sparse (strided) stores seem unprofitable to optimize. Details: stride { 24 }, types { F32-V128, F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000004 }.
nbody.c(81,7):remark #34064: adjacent sparse (strided) loads partitioned for speed. Details: stride { 24 }, types { F32-V128, F32-V128, F32-V128, F32-V128, F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x00000003F }.
nbody.c(81,7):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 24 }, types { F32-V128, F32-V128, F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x00000000F }.
nbody.c(81,7):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 24 }, types { F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000003 }.
nbody.c(83,7):remark #34065: adjacent sparse (strided) stores partitioned for speed. Details: stride { 24 }, types { F32-V128, F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000007 }.
nbody.c(83,7):remark #34034: adjacent sparse (strided) stores optimized for speed. Details: stride { 24 }, types { F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000003 }.
nbody.c(83,7):remark #34070: adjacent sparse (strided) stores seem unprofitable to optimize. Details: stride { 24 }, types { F32-V128, F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000004 }.
nbody.c(89,1):remark #34051: REGISTER ALLOCATION : [main] nbody.c:89

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     510
            Global    :     121
            Local     :     389
        Regenerable   :      55
        Spilled       :      31
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       2 [0.00e+00 ~ 0.0%]
        Spills        :     352 bytes*
            Reads     :      35 [5.15e+00 ~ 5.2%]
            Writes    :      33 [1.45e+00 ~ 1.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: move_particles(particle_t *, const f32, u64)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (move_particles(particle_t *, const f32, u64)) [3] nbody.c(44,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.c(49,3)
   remark #25461: Imperfect Loop Unroll-Jammed by 2   (pre-vector) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.c(57,7)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at nbody.c(57,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at nbody.c(49,3)
<Remainder>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.c(57,7)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at nbody.c(57,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at nbody.c(79,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between (p+i*24)[_2] (81:7) and (p+i*24)[_2] (81:7)

   LOOP BEGIN at nbody.c(81,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between (p+i*24)[_2] (81:7) and *(p+i*24+_2*4+12) (81:7)
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

nbody.c(60,19):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 24 }, types { F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000007 }.
nbody.c(60,19):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 24 }, types { F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000007 }.
nbody.c(44,1):remark #34051: REGISTER ALLOCATION : [move_particles] nbody.c:44

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm15]
        
    Routine temporaries
        Total         :     317
            Global    :      71
            Local     :     246
        Regenerable   :      12
        Spilled       :      15
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     264 bytes*
            Reads     :      22 [5.60e+00 ~ 5.6%]
            Writes    :      22 [1.71e+00 ~ 1.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: init(particle_t *, u64)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (init(particle_t *, u64)) [4] nbody.c(22,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.c(23,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand(void) (26:21) and call:rand(void) (38:22)
LOOP END

    Report from: Code generation optimizations [cg]

nbody.c(22,1):remark #34051: REGISTER ALLOCATION : [init] nbody.c:22

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r12-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      46
            Global    :      30
            Local     :      16
        Regenerable   :       3
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       8 [6.40e+00 ~ 6.4%]
            Writes    :       7 [4.76e+00 ~ 4.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
