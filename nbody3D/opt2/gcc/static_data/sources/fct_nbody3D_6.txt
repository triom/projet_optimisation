/mnt/d/isty/IATIC5/new/projet_optimisation/nbody3D/nbody.c: 147 - 186
--------------------------------------------------------------------------------

147:   #pragma omp parallel private(i, j) shared(softening, fx, fy, fz) 
148:   {
149:     #pragma omp for schedule(guided) reduction(+:fx, fy, fz)
150:     for (i = 0; i < n; i++)
151:     {
152:       //
153:       f32 fx = 0.0;
154:       f32 fy = 0.0;
155:       f32 fz = 0.0;
156: 
157:       // 23 floating-point operations
158:       for (j = 0; j < n; j++)
159:       {
160:         // Newton's law
161:         const f32 dx = p[j].x - p[i].x;                                // 1 (sub)
162:         const f32 dy = p[j].y - p[i].y;                                // 2 (sub)
163:         const f32 dz = p[j].z - p[i].z;                                // 3 (sub)
164:         const f32 d_2 = (dx * dx) + (dy * dy) + (dz * dz) + softening; // 9 (mul, add)
165:         const f32 d_3_over_2 = pow(d_2, 3.0 / 2.0);                    // 11 (pow, div)
166: 
167:         // Net force
168:         fx += dx / d_3_over_2; // 13 (add, div)
169:         fy += dy / d_3_over_2; // 15 (add, div)
170:         fz += dz / d_3_over_2; // 17 (add, div)
171:       }
172: 
173:       //
174:       p[i].vx += dt * fx; // 19 (mul, add)
175:       p[i].vy += dt * fy; // 21 (mul, add)
176:       p[i].vz += dt * fz; // 23 (mul, add)
[...]
182:       for (u64 i = 0; i < n; i++)
183:       {
184:         p[i].x += dt * p[i].vx;
185:         p[i].y += dt * p[i].vy;
186:         p[i].z += dt * p[i].vz;
