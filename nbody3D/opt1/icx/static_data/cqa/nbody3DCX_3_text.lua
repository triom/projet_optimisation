_cqa_text_report = {
  paths = {
    {
      hint = {
        {
          details = "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - VGATHERQPS: 24 occurrences\n - VINSERTF128: 11 occurrences\n",
          title = "Complex instructions",
          txt = "Detected COMPLEX INSTRUCTIONS.\n",
        },
        {
          workaround = "Try to remove indirect accesses. If applicable, precompute elements out of the innermost loop.",
          details = " - Irregular (variable stride) or indirect: 8 occurrence(s)\nNon-unit stride (uncontiguous) accesses are not efficiently using data caches\n",
          title = "Slow data structures access",
          txt = "Detected data structures (typically arrays) that cannot be efficiently read/written",
        },
        {
          workaround = " - Pass to your compiler a micro-architecture specialization option:\n  * Please read your compiler manual\n - Use vector aligned instructions:\n  1) align your arrays on 32 bytes boundaries: replace { void *p = malloc (size); } with { void *p; posix_memalign (&p, 32, size); }.\n  2) inform your compiler that your arrays are vector aligned: read your compiler manual.\n",
          details = " - VINSERTF128: 12 occurrences\n",
          title = "Vector unaligned load/store instructions",
          txt = "Detected 12 suboptimal vector unaligned load/store instructions.\n",
        },
        {
          workaround = "Try to simplify your code and/or replace indirect accesses with unit-stride ones.",
          details = " - VGATHERQPS: 24 occurrences\n",
          title = "Gather/scatter instructions",
          txt = "Detected gather/scatter instructions (typically caused by indirect accesses).",
        },
        {
          title = "Type of elements and instruction set",
          txt = "64 AVX instructions are processing arithmetic or math operations on single precision FP elements in vector mode (eight at a time).\n",
        },
        {
          title = "Matching between your loop (in the source code) and the binary loop",
          txt = "The binary loop is composed of 736 FP arithmetical operations:\n - 320: addition or subtraction (224 inside FMA instructions)\n - 384: multiply (224 inside FMA instructions)\n - 32: fast square root reciprocal\nThe binary loop is loading 1172 bytes (293 single precision FP elements).\nThe binary loop is storing 368 bytes (92 single precision FP elements).",
        },
        {
          title = "Arithmetic intensity",
          txt = "Arithmetic intensity is 0.48 FP operations per loaded or stored byte.",
        },
        {
          workaround = "Unroll your loop if trip count is significantly higher than target unroll factor and if some data references are common to consecutive iterations. This can be done manually.",
          title = "Unroll opportunity",
          txt = "Loop is potentially data access bound.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 217\nnb uops            : 299\nloop length        : 1250\nused x86 registers : 5\nused mmx registers : 0\nused xmm registers : 10\nused ymm registers : 16\nused zmm registers : 0\nnb stack references: 22\nADD-SUB / MUL ratio: 0.60\n",
        },
        {
          title = "Front-end",
          txt = "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 74.75 cycles\nfront end            : 74.75 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0    | P1    | P2    | P3    | P4    | P5    | P6   | P7\n---------------------------------------------------------------------\nuops   | 70.00 | 70.00 | 65.50 | 65.50 | 17.00 | 56.00 | 3.00 | 17.00\ncycles | 70.00 | 70.00 | 65.50 | 65.50 | 17.00 | 56.00 | 3.00 | 17.00\n\nCycles executing div or sqrt instructions: NA\nLongest recurrence chain latency (RecMII): 16.00\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 74.75\nDispatch  : 70.00\nData deps.: 16.00\nOverall L1: 74.75\n",
        },
        {
          title = "Vectorization ratios",
          txt = "INT\nall    : 92%\nload   : 100%\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : 100%\nadd-sub: 94%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 90%\nFP\nall     : 96%\nload    : 89%\nstore   : 100%\nmul     : 100%\nadd-sub : 100%\nfma     : 100%\ndiv/sqrt: 100%\nother   : 92%\nINT+FP\nall     : 95%\nload    : 91%\nstore   : 100%\nmul     : 100%\nadd-sub : 96%\nfma     : 100%\ndiv/sqrt: 100%\nother   : 92%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "INT\nall    : 69%\nload   : 95%\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : 100%\nadd-sub: 95%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 50%\nFP\nall     : 75%\nload    : 55%\nstore   : 67%\nmul     : 100%\nadd-sub : 100%\nfma     : 100%\ndiv/sqrt: 100%\nother   : 51%\nINT+FP\nall     : 74%\nload    : 62%\nstore   : 67%\nmul     : 100%\nadd-sub : 97%\nfma     : 100%\ndiv/sqrt: 100%\nother   : 51%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 74.75 cycles. At this rate:\n - 24% of peak load performance is reached (15.68 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 15% of peak store performance is reached (4.92 out of 32.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 74.75 to 70.00 cycles (1.07x speedup).\n",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the loop is: 401520\n\nInstruction                                | Nb FU | P0   | P1   | P2   | P3   | P4 | P5   | P6   | P7   | Latency | Recip. throughput\n--------------------------------------------------------------------------------------------------------------------------------------\nVMOVQ %RCX,%XMM0                           | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0    | 1       | 1\nVPBROADCASTQ %XMM0,%YMM0                   | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0    | 3       | 1\nVPSRLQ $0x20,%YMM0,%YMM1                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVMOVDQU 0x300(%RSP),%YMM2                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5       | 0.50\nVPMULUDQ %YMM2,%YMM1,%YMM1                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 5       | 0.50\nVPMULUDQ %YMM2,%YMM0,%YMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 5       | 0.50\nVPSLLQ $0x20,%YMM1,%YMM1                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVPADDQ %YMM1,%YMM0,%YMM11                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVPADDQ %YMM5,%YMM11,%YMM0                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVPCMPEQD %XMM4,%XMM4,%XMM4                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVPXOR %XMM2,%XMM2,%XMM2                    | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVPADDQ %YMM9,%YMM11,%YMM1                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVPCMPEQD %XMM5,%XMM5,%XMM5                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVGATHERQPS %XMM4,(%RDI,%YMM1,1),%XMM2      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM2,0x50(%RSP)                   | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVXORPS %XMM3,%XMM3,%XMM3                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM5,(%RDI,%YMM0,1),%XMM3      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVPBROADCASTQ %XMM10,%YMM14                 | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0    | 3       | 1\nVPCMPEQD %XMM4,%XMM4,%XMM4                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM13,%XMM13,%XMM13                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVPADDQ %YMM0,%YMM14,%YMM9                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVPCMPEQD %XMM5,%XMM5,%XMM5                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVPXOR %XMM10,%XMM10,%XMM10                 | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVPADDQ 0xcb09(%RIP),%YMM11,%YMM7           | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 1       | 0.50\nVPADDQ 0xcb21(%RIP),%YMM11,%YMM8           | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 1       | 0.50\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVPADDQ %YMM1,%YMM14,%YMM1                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,(%RDI,%YMM8,1),%XMM2      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM2,0x30(%RSP)                   | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVGATHERQPS %XMM4,0x4(,%YMM1,1),%XMM13      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM13,-0x80(%RSP)                 | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM5,0x4(,%YMM9,1),%XMM10      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVAPS %YMM10,%YMM13                      | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,(%RDI,%YMM7,1),%XMM2      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %YMM2,0x90(%RSP)                   | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM5,%XMM5,%XMM5                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,0x8(,%YMM1,1),%XMM5       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM10,%XMM10,%XMM10                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVPCMPEQD %XMM1,%XMM1,%XMM1                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVPADDQ %YMM8,%YMM14,%YMM4                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,0x8(,%YMM9,1),%XMM10      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVAPS %YMM10,%YMM8                       | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVGATHERQPS %XMM1,0x4(,%YMM4,1),%XMM2       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM2,0x70(%RSP)                   | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVXORPS %XMM1,%XMM1,%XMM1                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,0x8(,%YMM4,1),%XMM1       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM1,-0x20(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVPADDQ %YMM7,%YMM14,%YMM1                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVPCMPEQD %XMM4,%XMM4,%XMM4                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVGATHERQPS %XMM0,0x4(,%YMM1,1),%XMM2       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %YMM2,0x140(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVXORPS %XMM0,%XMM0,%XMM0                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM4,0x8(,%YMM1,1),%XMM0       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %YMM0,-0x40(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVPADDQ 0xca71(%RIP),%YMM11,%YMM1           | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 1       | 0.50\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,(%RDI,%YMM1,1),%XMM2      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM2,0x10(%RSP)                   | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPADDQ %YMM1,%YMM14,%YMM0                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVPCMPEQD %XMM1,%XMM1,%XMM1                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM1,0x4(,%YMM0,1),%XMM2       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM2,-0x50(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPCMPEQD %XMM1,%XMM1,%XMM1                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM1,0x8(,%YMM0,1),%XMM2       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM2,-0x60(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVPADDQ 0xca01(%RIP),%YMM11,%YMM1           | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 1       | 0.50\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,(%RDI,%YMM1,1),%XMM2      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %YMM2,0x3a0(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPADDQ %YMM1,%YMM14,%YMM0                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVPCMPEQD %XMM1,%XMM1,%XMM1                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM1,0x4(,%YMM0,1),%XMM2       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %YMM2,0x120(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPCMPEQD %XMM1,%XMM1,%XMM1                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM10,%XMM10,%XMM10                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM1,0x8(,%YMM0,1),%XMM10      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVPADDQ 0xca10(%RIP),%YMM11,%YMM1           | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 1       | 0.50\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,(%RDI,%YMM1,1),%XMM2      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM2,0x110(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPADDQ %YMM1,%YMM14,%YMM4                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVPCMPEQD %XMM1,%XMM1,%XMM1                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM0,%XMM0,%XMM0                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM1,0x4(,%YMM4,1),%XMM0       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM0,0x100(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM1,%XMM1,%XMM1                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,0x8(,%YMM4,1),%XMM1       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM1,0xf0(%RSP)                   | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPADDQ 0xc99b(%RIP),%YMM11,%YMM0           | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 1       | 0.50\nVPCMPEQD %XMM4,%XMM4,%XMM4                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM9,%XMM9,%XMM9                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM4,(%RDI,%YMM0,1),%XMM9      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVPADDQ %YMM0,%YMM14,%YMM4                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVPXOR %XMM14,%XMM14,%XMM14                 | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,0x4(,%YMM4,1),%XMM14      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM1,%XMM1,%XMM1                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,0x8(,%YMM4,1),%XMM1       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %YMM1,0x380(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVINSERTF128 $0x1,0x50(%RSP),%YMM3,%YMM0    | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVINSERTF128 $0x1,-0x80(%RSP),%YMM13,%YMM4  | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVINSERTF128 $0x1,%XMM5,%YMM8,%YMM1         | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0    | 3       | 1\nVMOVUPS 0x360(%RSP),%YMM3                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5-6     | 0.50\nVSUBPS %YMM3,%YMM0,%YMM2                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVUPS 0x340(%RSP),%YMM5                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5-6     | 0.50\nVSUBPS %YMM5,%YMM4,%YMM4                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVUPS 0x320(%RSP),%YMM8                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5-6     | 0.50\nVSUBPS %YMM8,%YMM1,%YMM1                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVAPS %YMM2,%YMM0                        | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVBROADCASTSS 0xc7f7(%RIP),%YMM7            | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5       | 0.50\nVFMADD213PS %YMM7,%YMM2,%YMM0              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM4,%YMM4,%YMM0              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM1,%YMM1,%YMM0              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM0,%YMM0,%YMM13                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM0,%YMM13,%YMM0                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVRSQRTPS %YMM0,%YMM13                      | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 1\nVMULPS %YMM0,%YMM13,%YMM0                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVBROADCASTSS 0xc7d3(%RIP),%YMM11           | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5       | 0.50\nVFMADD213PS %YMM11,%YMM13,%YMM0            | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVBROADCASTSS 0xc7c9(%RIP),%YMM7            | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5       | 0.50\nVMULPS %YMM7,%YMM13,%YMM13                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM0,%YMM13,%YMM0                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM2,%YMM0,%YMM15             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM4,%YMM0,%YMM6              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM0,%YMM1,%YMM12             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVUPS 0x90(%RSP),%YMM0                   | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5-6     | 0.50\nVINSERTF128 $0x1,0x30(%RSP),%YMM0,%YMM0    | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVMOVUPS 0x140(%RSP),%YMM1                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5-6     | 0.50\nVINSERTF128 $0x1,0x70(%RSP),%YMM1,%YMM1    | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVSUBPS %YMM3,%YMM0,%YMM0                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVSUBPS %YMM5,%YMM1,%YMM1                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVUPS -0x40(%RSP),%YMM2                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5-6     | 0.50\nVINSERTF128 $0x1,-0x20(%RSP),%YMM2,%YMM2   | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVSUBPS %YMM8,%YMM2,%YMM2                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVAPS %YMM0,%YMM4                        | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVBROADCASTSS 0xc760(%RIP),%YMM13           | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5       | 0.50\nVFMADD213PS %YMM13,%YMM0,%YMM4             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM1,%YMM1,%YMM4              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM2,%YMM2,%YMM4              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM4,%YMM4,%YMM13                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM4,%YMM13,%YMM4                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVRSQRTPS %YMM4,%YMM13                      | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 1\nVMULPS %YMM4,%YMM13,%YMM4                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD213PS %YMM11,%YMM13,%YMM4            | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM7,%YMM13,%YMM13                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM4,%YMM13,%YMM4                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVBROADCASTSS 0xc72b(%RIP),%YMM13           | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5       | 0.50\nVFMADD231PS %YMM0,%YMM4,%YMM15             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM1,%YMM4,%YMM6              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVUPS 0x3a0(%RSP),%YMM0                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5-6     | 0.50\nVINSERTF128 $0x1,0x10(%RSP),%YMM0,%YMM0    | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVMOVUPS 0x120(%RSP),%YMM1                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5-6     | 0.50\nVINSERTF128 $0x1,-0x50(%RSP),%YMM1,%YMM1   | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVINSERTF128 $0x1,-0x60(%RSP),%YMM10,%YMM10 | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVSUBPS %YMM3,%YMM0,%YMM0                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVSUBPS %YMM5,%YMM1,%YMM1                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM4,%YMM2,%YMM12             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVSUBPS %YMM8,%YMM10,%YMM2                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVAPS %YMM0,%YMM4                        | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVFMADD213PS %YMM13,%YMM0,%YMM4             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM1,%YMM1,%YMM4              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM2,%YMM2,%YMM4              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM4,%YMM4,%YMM10                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM4,%YMM10,%YMM4                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVRSQRTPS %YMM4,%YMM10                      | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 1\nVMULPS %YMM4,%YMM10,%YMM4                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD213PS %YMM11,%YMM10,%YMM4            | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM7,%YMM10,%YMM10                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM4,%YMM10,%YMM4                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVDQU 0xe0(%RSP),%XMM10                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM0,%YMM4,%YMM15             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM1,%YMM4,%YMM6              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM4,%YMM2,%YMM12             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVINSERTF128 $0x1,0x110(%RSP),%YMM9,%YMM0   | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVMOVDQU 0xc702(%RIP),%YMM9                 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5       | 0.50\nVSUBPS %YMM3,%YMM0,%YMM0                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVINSERTF128 $0x1,0x100(%RSP),%YMM14,%YMM1  | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVSUBPS %YMM5,%YMM1,%YMM1                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVUPS 0x380(%RSP),%YMM2                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5-6     | 0.50\nVINSERTF128 $0x1,0xf0(%RSP),%YMM2,%YMM2    | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVSUBPS %YMM8,%YMM2,%YMM2                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVAPS %YMM0,%YMM4                        | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVFMADD213PS %YMM13,%YMM0,%YMM4             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM1,%YMM1,%YMM4              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM2,%YMM2,%YMM4              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM4,%YMM4,%YMM5                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM4,%YMM5,%YMM4                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVRSQRTPS %YMM4,%YMM5                       | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 1\nVMULPS %YMM5,%YMM4,%YMM4                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD213PS %YMM11,%YMM5,%YMM4             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM7,%YMM5,%YMM5                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM4,%YMM5,%YMM4                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVDQU 0xc67e(%RIP),%YMM5                 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5       | 0.50\nVFMADD231PS %YMM0,%YMM4,%YMM15             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM1,%YMM4,%YMM6              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM4,%YMM2,%YMM12             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nADD $0x8,%RAX                              | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25\nADD $0x20,%RCX                             | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25\nCMP %RDX,%RAX                              | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25\nJB 401520 <move_particles+0x150>           | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 0       | 0.50-1\n",
        },
      },
      header = {
        "30% of peak computational performance is used (9.85 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Pass to your compiler a micro-architecture specialization option:\n  * Please read your compiler manual\n - Use vector aligned instructions:\n  1) align your arrays on 32 bytes boundaries: replace { void *p = malloc (size); } with { void *p; posix_memalign (&p, 32, size); }.\n  2) inform your compiler that your arrays are vector aligned: read your compiler manual.\n",
          details = "95% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 91% of SSE/AVX loads are used in vector version.\n - 96% of SSE/AVX addition or subtraction instructions are used in vector version.\n - 92% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized loop can use their full power.\n",
          title = "Vectorization",
          txt = "Your loop is highly vectorized.\nOnly 74% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your loop, you can lower the cost of an iteration from 74.75 to 60.07 cycles (1.24x speedup).",
        },
        {
          title = "Execution units bottlenecks",
          txt = "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
        },
      },
      potential = {
        {
          workaround = "Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).",
          title = "FMA",
          txt = "Detected 224 FMA (fused multiply-add) operations.\nPresence of both ADD/SUB and MUL operations.",
        },
      },
    },
  },
  AVG = {
      hint = {
        {
          details = "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - VGATHERQPS: 24 occurrences\n - VINSERTF128: 11 occurrences\n",
          title = "Complex instructions",
          txt = "Detected COMPLEX INSTRUCTIONS.\n",
        },
        {
          workaround = "Try to remove indirect accesses. If applicable, precompute elements out of the innermost loop.",
          details = " - Irregular (variable stride) or indirect: 8 occurrence(s)\nNon-unit stride (uncontiguous) accesses are not efficiently using data caches\n",
          title = "Slow data structures access",
          txt = "Detected data structures (typically arrays) that cannot be efficiently read/written",
        },
        {
          workaround = " - Pass to your compiler a micro-architecture specialization option:\n  * Please read your compiler manual\n - Use vector aligned instructions:\n  1) align your arrays on 32 bytes boundaries: replace { void *p = malloc (size); } with { void *p; posix_memalign (&p, 32, size); }.\n  2) inform your compiler that your arrays are vector aligned: read your compiler manual.\n",
          details = " - VINSERTF128: 12 occurrences\n",
          title = "Vector unaligned load/store instructions",
          txt = "Detected 12 suboptimal vector unaligned load/store instructions.\n",
        },
        {
          workaround = "Try to simplify your code and/or replace indirect accesses with unit-stride ones.",
          details = " - VGATHERQPS: 24 occurrences\n",
          title = "Gather/scatter instructions",
          txt = "Detected gather/scatter instructions (typically caused by indirect accesses).",
        },
        {
          title = "Type of elements and instruction set",
          txt = "64 AVX instructions are processing arithmetic or math operations on single precision FP elements in vector mode (eight at a time).\n",
        },
        {
          title = "Matching between your loop (in the source code) and the binary loop",
          txt = "The binary loop is composed of 736 FP arithmetical operations:\n - 320: addition or subtraction (224 inside FMA instructions)\n - 384: multiply (224 inside FMA instructions)\n - 32: fast square root reciprocal\nThe binary loop is loading 1172 bytes (293 single precision FP elements).\nThe binary loop is storing 368 bytes (92 single precision FP elements).",
        },
        {
          title = "Arithmetic intensity",
          txt = "Arithmetic intensity is 0.48 FP operations per loaded or stored byte.",
        },
        {
          workaround = "Unroll your loop if trip count is significantly higher than target unroll factor and if some data references are common to consecutive iterations. This can be done manually.",
          title = "Unroll opportunity",
          txt = "Loop is potentially data access bound.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 217\nnb uops            : 299\nloop length        : 1250\nused x86 registers : 5\nused mmx registers : 0\nused xmm registers : 10\nused ymm registers : 16\nused zmm registers : 0\nnb stack references: 22\nADD-SUB / MUL ratio: 0.60\n",
        },
        {
          title = "Front-end",
          txt = "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 74.75 cycles\nfront end            : 74.75 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0    | P1    | P2    | P3    | P4    | P5    | P6   | P7\n---------------------------------------------------------------------\nuops   | 70.00 | 70.00 | 65.50 | 65.50 | 17.00 | 56.00 | 3.00 | 17.00\ncycles | 70.00 | 70.00 | 65.50 | 65.50 | 17.00 | 56.00 | 3.00 | 17.00\n\nCycles executing div or sqrt instructions: NA\nLongest recurrence chain latency (RecMII): 16.00\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 74.75\nDispatch  : 70.00\nData deps.: 16.00\nOverall L1: 74.75\n",
        },
        {
          title = "Vectorization ratios",
          txt = "INT\nall    : 92%\nload   : 100%\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : 100%\nadd-sub: 94%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 90%\nFP\nall     : 96%\nload    : 89%\nstore   : 100%\nmul     : 100%\nadd-sub : 100%\nfma     : 100%\ndiv/sqrt: 100%\nother   : 92%\nINT+FP\nall     : 95%\nload    : 91%\nstore   : 100%\nmul     : 100%\nadd-sub : 96%\nfma     : 100%\ndiv/sqrt: 100%\nother   : 92%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "INT\nall    : 69%\nload   : 95%\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : 100%\nadd-sub: 95%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 50%\nFP\nall     : 75%\nload    : 55%\nstore   : 67%\nmul     : 100%\nadd-sub : 100%\nfma     : 100%\ndiv/sqrt: 100%\nother   : 51%\nINT+FP\nall     : 74%\nload    : 62%\nstore   : 67%\nmul     : 100%\nadd-sub : 97%\nfma     : 100%\ndiv/sqrt: 100%\nother   : 51%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 74.75 cycles. At this rate:\n - 24% of peak load performance is reached (15.68 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 15% of peak store performance is reached (4.92 out of 32.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 74.75 to 70.00 cycles (1.07x speedup).\n",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the loop is: 401520\n\nInstruction                                | Nb FU | P0   | P1   | P2   | P3   | P4 | P5   | P6   | P7   | Latency | Recip. throughput\n--------------------------------------------------------------------------------------------------------------------------------------\nVMOVQ %RCX,%XMM0                           | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0    | 1       | 1\nVPBROADCASTQ %XMM0,%YMM0                   | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0    | 3       | 1\nVPSRLQ $0x20,%YMM0,%YMM1                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVMOVDQU 0x300(%RSP),%YMM2                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5       | 0.50\nVPMULUDQ %YMM2,%YMM1,%YMM1                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 5       | 0.50\nVPMULUDQ %YMM2,%YMM0,%YMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 5       | 0.50\nVPSLLQ $0x20,%YMM1,%YMM1                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVPADDQ %YMM1,%YMM0,%YMM11                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVPADDQ %YMM5,%YMM11,%YMM0                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVPCMPEQD %XMM4,%XMM4,%XMM4                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVPXOR %XMM2,%XMM2,%XMM2                    | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVPADDQ %YMM9,%YMM11,%YMM1                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVPCMPEQD %XMM5,%XMM5,%XMM5                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVGATHERQPS %XMM4,(%RDI,%YMM1,1),%XMM2      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM2,0x50(%RSP)                   | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVXORPS %XMM3,%XMM3,%XMM3                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM5,(%RDI,%YMM0,1),%XMM3      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVPBROADCASTQ %XMM10,%YMM14                 | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0    | 3       | 1\nVPCMPEQD %XMM4,%XMM4,%XMM4                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM13,%XMM13,%XMM13                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVPADDQ %YMM0,%YMM14,%YMM9                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVPCMPEQD %XMM5,%XMM5,%XMM5                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVPXOR %XMM10,%XMM10,%XMM10                 | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVPADDQ 0xcb09(%RIP),%YMM11,%YMM7           | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 1       | 0.50\nVPADDQ 0xcb21(%RIP),%YMM11,%YMM8           | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 1       | 0.50\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVPADDQ %YMM1,%YMM14,%YMM1                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,(%RDI,%YMM8,1),%XMM2      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM2,0x30(%RSP)                   | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVGATHERQPS %XMM4,0x4(,%YMM1,1),%XMM13      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM13,-0x80(%RSP)                 | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM5,0x4(,%YMM9,1),%XMM10      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVAPS %YMM10,%YMM13                      | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,(%RDI,%YMM7,1),%XMM2      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %YMM2,0x90(%RSP)                   | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM5,%XMM5,%XMM5                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,0x8(,%YMM1,1),%XMM5       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM10,%XMM10,%XMM10                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVPCMPEQD %XMM1,%XMM1,%XMM1                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVPADDQ %YMM8,%YMM14,%YMM4                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,0x8(,%YMM9,1),%XMM10      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVAPS %YMM10,%YMM8                       | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVGATHERQPS %XMM1,0x4(,%YMM4,1),%XMM2       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM2,0x70(%RSP)                   | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVXORPS %XMM1,%XMM1,%XMM1                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,0x8(,%YMM4,1),%XMM1       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM1,-0x20(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVPADDQ %YMM7,%YMM14,%YMM1                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVPCMPEQD %XMM4,%XMM4,%XMM4                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVGATHERQPS %XMM0,0x4(,%YMM1,1),%XMM2       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %YMM2,0x140(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVXORPS %XMM0,%XMM0,%XMM0                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM4,0x8(,%YMM1,1),%XMM0       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %YMM0,-0x40(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVPADDQ 0xca71(%RIP),%YMM11,%YMM1           | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 1       | 0.50\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,(%RDI,%YMM1,1),%XMM2      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM2,0x10(%RSP)                   | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPADDQ %YMM1,%YMM14,%YMM0                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVPCMPEQD %XMM1,%XMM1,%XMM1                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM1,0x4(,%YMM0,1),%XMM2       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM2,-0x50(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPCMPEQD %XMM1,%XMM1,%XMM1                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM1,0x8(,%YMM0,1),%XMM2       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM2,-0x60(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVPADDQ 0xca01(%RIP),%YMM11,%YMM1           | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 1       | 0.50\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,(%RDI,%YMM1,1),%XMM2      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %YMM2,0x3a0(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPADDQ %YMM1,%YMM14,%YMM0                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVPCMPEQD %XMM1,%XMM1,%XMM1                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM1,0x4(,%YMM0,1),%XMM2       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %YMM2,0x120(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPCMPEQD %XMM1,%XMM1,%XMM1                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM10,%XMM10,%XMM10                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM1,0x8(,%YMM0,1),%XMM10      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVPADDQ 0xca10(%RIP),%YMM11,%YMM1           | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 1       | 0.50\nVXORPS %XMM2,%XMM2,%XMM2                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,(%RDI,%YMM1,1),%XMM2      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM2,0x110(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPADDQ %YMM1,%YMM14,%YMM4                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVPCMPEQD %XMM1,%XMM1,%XMM1                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM0,%XMM0,%XMM0                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM1,0x4(,%YMM4,1),%XMM0       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM0,0x100(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM1,%XMM1,%XMM1                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,0x8(,%YMM4,1),%XMM1       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %XMM1,0xf0(%RSP)                   | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVPADDQ 0xc99b(%RIP),%YMM11,%YMM0           | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 1       | 0.50\nVPCMPEQD %XMM4,%XMM4,%XMM4                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM9,%XMM9,%XMM9                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM4,(%RDI,%YMM0,1),%XMM9      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVPADDQ %YMM0,%YMM14,%YMM4                  | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0    | 1       | 0.33\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVPXOR %XMM14,%XMM14,%XMM14                 | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,0x4(,%YMM4,1),%XMM14      | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVPCMPEQD %XMM0,%XMM0,%XMM0                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 1       | 0.50\nVXORPS %XMM1,%XMM1,%XMM1                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVGATHERQPS %XMM0,0x8(,%YMM4,1),%XMM1       | 4     | 1    | 1    | 2    | 2    | 0  | 1    | 0    | 0    | 20      | 4\nVMOVUPS %YMM1,0x380(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1\nVINSERTF128 $0x1,0x50(%RSP),%YMM3,%YMM0    | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVINSERTF128 $0x1,-0x80(%RSP),%YMM13,%YMM4  | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVINSERTF128 $0x1,%XMM5,%YMM8,%YMM1         | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0    | 3       | 1\nVMOVUPS 0x360(%RSP),%YMM3                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5-6     | 0.50\nVSUBPS %YMM3,%YMM0,%YMM2                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVUPS 0x340(%RSP),%YMM5                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5-6     | 0.50\nVSUBPS %YMM5,%YMM4,%YMM4                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVUPS 0x320(%RSP),%YMM8                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5-6     | 0.50\nVSUBPS %YMM8,%YMM1,%YMM1                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVAPS %YMM2,%YMM0                        | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVBROADCASTSS 0xc7f7(%RIP),%YMM7            | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5       | 0.50\nVFMADD213PS %YMM7,%YMM2,%YMM0              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM4,%YMM4,%YMM0              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM1,%YMM1,%YMM0              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM0,%YMM0,%YMM13                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM0,%YMM13,%YMM0                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVRSQRTPS %YMM0,%YMM13                      | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 1\nVMULPS %YMM0,%YMM13,%YMM0                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVBROADCASTSS 0xc7d3(%RIP),%YMM11           | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5       | 0.50\nVFMADD213PS %YMM11,%YMM13,%YMM0            | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVBROADCASTSS 0xc7c9(%RIP),%YMM7            | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5       | 0.50\nVMULPS %YMM7,%YMM13,%YMM13                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM0,%YMM13,%YMM0                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM2,%YMM0,%YMM15             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM4,%YMM0,%YMM6              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM0,%YMM1,%YMM12             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVUPS 0x90(%RSP),%YMM0                   | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5-6     | 0.50\nVINSERTF128 $0x1,0x30(%RSP),%YMM0,%YMM0    | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVMOVUPS 0x140(%RSP),%YMM1                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5-6     | 0.50\nVINSERTF128 $0x1,0x70(%RSP),%YMM1,%YMM1    | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVSUBPS %YMM3,%YMM0,%YMM0                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVSUBPS %YMM5,%YMM1,%YMM1                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVUPS -0x40(%RSP),%YMM2                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5-6     | 0.50\nVINSERTF128 $0x1,-0x20(%RSP),%YMM2,%YMM2   | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVSUBPS %YMM8,%YMM2,%YMM2                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVAPS %YMM0,%YMM4                        | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVBROADCASTSS 0xc760(%RIP),%YMM13           | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5       | 0.50\nVFMADD213PS %YMM13,%YMM0,%YMM4             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM1,%YMM1,%YMM4              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM2,%YMM2,%YMM4              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM4,%YMM4,%YMM13                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM4,%YMM13,%YMM4                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVRSQRTPS %YMM4,%YMM13                      | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 1\nVMULPS %YMM4,%YMM13,%YMM4                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD213PS %YMM11,%YMM13,%YMM4            | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM7,%YMM13,%YMM13                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM4,%YMM13,%YMM4                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVBROADCASTSS 0xc72b(%RIP),%YMM13           | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5       | 0.50\nVFMADD231PS %YMM0,%YMM4,%YMM15             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM1,%YMM4,%YMM6              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVUPS 0x3a0(%RSP),%YMM0                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5-6     | 0.50\nVINSERTF128 $0x1,0x10(%RSP),%YMM0,%YMM0    | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVMOVUPS 0x120(%RSP),%YMM1                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5-6     | 0.50\nVINSERTF128 $0x1,-0x50(%RSP),%YMM1,%YMM1   | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVINSERTF128 $0x1,-0x60(%RSP),%YMM10,%YMM10 | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVSUBPS %YMM3,%YMM0,%YMM0                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVSUBPS %YMM5,%YMM1,%YMM1                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM4,%YMM2,%YMM12             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVSUBPS %YMM8,%YMM10,%YMM2                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVAPS %YMM0,%YMM4                        | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVFMADD213PS %YMM13,%YMM0,%YMM4             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM1,%YMM1,%YMM4              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM2,%YMM2,%YMM4              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM4,%YMM4,%YMM10                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM4,%YMM10,%YMM4                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVRSQRTPS %YMM4,%YMM10                      | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 1\nVMULPS %YMM4,%YMM10,%YMM4                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD213PS %YMM11,%YMM10,%YMM4            | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM7,%YMM10,%YMM10                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM4,%YMM10,%YMM4                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVDQU 0xe0(%RSP),%XMM10                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM0,%YMM4,%YMM15             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM1,%YMM4,%YMM6              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM4,%YMM2,%YMM12             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVINSERTF128 $0x1,0x110(%RSP),%YMM9,%YMM0   | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVMOVDQU 0xc702(%RIP),%YMM9                 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5       | 0.50\nVSUBPS %YMM3,%YMM0,%YMM0                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVINSERTF128 $0x1,0x100(%RSP),%YMM14,%YMM1  | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVSUBPS %YMM5,%YMM1,%YMM1                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVUPS 0x380(%RSP),%YMM2                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5-6     | 0.50\nVINSERTF128 $0x1,0xf0(%RSP),%YMM2,%YMM2    | 2     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 0    | 0    | 5       | 0.50\nVSUBPS %YMM8,%YMM2,%YMM2                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVAPS %YMM0,%YMM4                        | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25\nVFMADD213PS %YMM13,%YMM0,%YMM4             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM1,%YMM1,%YMM4              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM2,%YMM2,%YMM4              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM4,%YMM4,%YMM5                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM4,%YMM5,%YMM4                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVRSQRTPS %YMM4,%YMM5                       | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 1\nVMULPS %YMM5,%YMM4,%YMM4                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD213PS %YMM11,%YMM5,%YMM4             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM7,%YMM5,%YMM5                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMULPS %YMM4,%YMM5,%YMM4                   | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVMOVDQU 0xc67e(%RIP),%YMM5                 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5       | 0.50\nVFMADD231PS %YMM0,%YMM4,%YMM15             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM1,%YMM4,%YMM6              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nVFMADD231PS %YMM4,%YMM2,%YMM12             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0    | 4       | 0.50\nADD $0x8,%RAX                              | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25\nADD $0x20,%RCX                             | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25\nCMP %RDX,%RAX                              | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25\nJB 401520 <move_particles+0x150>           | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 0       | 0.50-1\n",
        },
      },
      header = {
        "30% of peak computational performance is used (9.85 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Pass to your compiler a micro-architecture specialization option:\n  * Please read your compiler manual\n - Use vector aligned instructions:\n  1) align your arrays on 32 bytes boundaries: replace { void *p = malloc (size); } with { void *p; posix_memalign (&p, 32, size); }.\n  2) inform your compiler that your arrays are vector aligned: read your compiler manual.\n",
          details = "95% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 91% of SSE/AVX loads are used in vector version.\n - 96% of SSE/AVX addition or subtraction instructions are used in vector version.\n - 92% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized loop can use their full power.\n",
          title = "Vectorization",
          txt = "Your loop is highly vectorized.\nOnly 74% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your loop, you can lower the cost of an iteration from 74.75 to 60.07 cycles (1.24x speedup).",
        },
        {
          title = "Execution units bottlenecks",
          txt = "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
        },
      },
      potential = {
        {
          workaround = "Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).",
          title = "FMA",
          txt = "Detected 224 FMA (fused multiply-add) operations.\nPresence of both ADD/SUB and MUL operations.",
        },
      },
    },
  common = {
    header = {
      "The loop is defined in /mnt/d/isty/IATIC5/new/projet_optimisation/nbody3D/nbody.c:65-106.\n",
      "The related source loop is not unrolled or unrolled with no peel/tail loop.",
    },
    nb_paths = 1,
  },
}
