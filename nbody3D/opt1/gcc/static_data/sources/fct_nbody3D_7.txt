/mnt/d/isty/IATIC5/new/projet_optimisation/nbody3D/nbody.c: 52 - 134
--------------------------------------------------------------------------------

52: {
53:   //
54:   const f32 softening = 1e-20;
55: 
56:   //
57:   for (u64 i = 0; i < n; i++)
58:   {
59:     //
60:     f32 fx = 0.0;
61:     f32 fy = 0.0;
62:     f32 fz = 0.0;
63: 
64:     // 23 floating-point operations
65:     for (u64 j = 0; j < n; j += 4)
66:     {
67:       // Newton's law
68:       const f32 dx1 = p[j].x - p[i].x;
69:       const f32 dy1 = p[j].y - p[i].y;
70:       const f32 dz1 = p[j].z - p[i].z;
71:       const f32 d_2_1 = (dx1 * dx1) + (dy1 * dy1) + (dz1 * dz1) + softening;
72:       const f32 d_3_over_2_1 = powf(d_2_1, 1.5);
73: 
74:       fx += dx1 / d_3_over_2_1;
75:       fy += dy1 / d_3_over_2_1;
76:       fz += dz1 / d_3_over_2_1;
77: 
78:       const f32 dx2 = p[j + 1].x - p[i].x;
79:       const f32 dy2 = p[j + 1].y - p[i].y;
80:       const f32 dz2 = p[j + 1].z - p[i].z;
81:       const f32 d_2_2 = (dx2 * dx2) + (dy2 * dy2) + (dz2 * dz2) + softening;
82:       const f32 d_3_over_2_2 = powf(d_2_2, 1.5);
83: 
84:       fx += dx2 / d_3_over_2_2;
85:       fy += dy2 / d_3_over_2_2;
86:       fz += dz2 / d_3_over_2_2;
87: 
88:       const f32 dx3 = p[j + 2].x - p[i].x;
89:       const f32 dy3 = p[j + 2].y - p[i].y;
90:       const f32 dz3 = p[j + 2].z - p[i].z;
91:       const f32 d_2_3 = (dx3 * dx3) + (dy3 * dy3) + (dz3 * dz3) + softening;
92:       const f32 d_3_over_2_3 = powf(d_2_3, 1.5);
93: 
94:       fx += dx3 / d_3_over_2_3;
95:       fy += dy3 / d_3_over_2_3;
96:       fz += dz3 / d_3_over_2_3;
97: 
98:       const f32 dx4 = p[j + 3].x - p[i].x;
99:       const f32 dy4 = p[j + 3].y - p[i].y;
100:       const f32 dz4 = p[j + 3].z - p[i].z;
101:       const f32 d_2_4 = (dx4 * dx4) + (dy4 * dy4) + (dz4 * dz4) + softening;
102:       const f32 d_3_over_2_4 = powf(d_2_4, 1.5);
103: 
104:       fx += dx4 / d_3_over_2_4;
105:       fy += dy4 / d_3_over_2_4;
106:       fz += dz4 / d_3_over_2_4;
107:     }
108: 
109:     //
110:     p[i].vx += dt * fx; // 19
111:     p[i].vy += dt * fy; // 21
112:     p[i].vz += dt * fz; // 23
113:   }
114: 
115:   // 6 floating-point operations
116:   for (u64 i = 0; i < n; i += 4)
117:   {
118:     p[i].x += dt * p[i].vx;
119:     p[i].y += dt * p[i].vy;
120:     p[i].z += dt * p[i].vz;
121: 
122:     p[i + 1].x += dt * p[i + 1].vx;
123:     p[i + 1].y += dt * p[i + 1].vy;
124:     p[i + 1].z += dt * p[i + 1].vz;
125: 
126:     p[i + 2].x += dt * p[i + 2].vx;
127:     p[i + 2].y += dt * p[i + 2].vy;
128:     p[i + 2].z += dt * p[i + 2].vz;
129: 
130:     p[i + 3].y += dt * p[i + 3].vy;
131:     p[i + 3].x += dt * p[i + 3].vx;
132:     p[i + 3].z += dt * p[i + 3].vz;
133:   }
134: }
